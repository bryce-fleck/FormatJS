diff --git a/node_modules/@docusaurus/core/README.MD b/node_modules/@docusaurus/core/README.MD
new file mode 100644
index 0000000..1c92d51
--- /dev/null
+++ b/node_modules/@docusaurus/core/README.MD
@@ -0,0 +1 @@
+# Docusaurus v2
diff --git a/node_modules/@docusaurus/core/bin/docusaurus.js b/node_modules/@docusaurus/core/bin/docusaurus.js
index ff0969c..5cb6238 100755
--- a/node_modules/@docusaurus/core/bin/docusaurus.js
+++ b/node_modules/@docusaurus/core/bin/docusaurus.js
@@ -109,6 +109,14 @@ cli
     '--out-dir <dir>',
     'The full path for the new output directory, relative to the current workspace (default: build).',
   )
+  .option(
+    '--config <config>',
+    'Path to docusaurus config file, default to `[siteDir]/docusaurus.config.js`',
+  )
+  .option(
+    '--generated-files-dir <dir>',
+    'Path to temporary `.docusaurus` folder, default to `[siteDir]/.docusaurus`.',
+  )
   .option(
     '-l, --locale <locale>',
     'Build the site in a specified locale. Build all known locales otherwise.',
@@ -117,14 +125,21 @@ cli
     '--no-minify',
     'Build website without minimizing JS bundles (default: false)',
   )
-  .action((siteDir = '.', {bundleAnalyzer, outDir, locale, minify}) => {
-    wrapCommand(build)(path.resolve(siteDir), {
-      bundleAnalyzer,
-      outDir,
-      locale,
-      minify,
-    });
-  });
+  .action(
+    (
+      siteDir = '.',
+      {bundleAnalyzer, config, generatedFilesDir, outDir, locale, minify},
+    ) => {
+      wrapCommand(build)(path.resolve(siteDir), {
+        bundleAnalyzer,
+        outDir,
+        config,
+        generatedFilesDir,
+        locale,
+        minify,
+      });
+    },
+  );
 
 cli
   .command('swizzle [themeName] [componentName] [siteDir]')
@@ -155,12 +170,25 @@ cli
     '--out-dir <dir>',
     'The full path for the new output directory, relative to the current workspace (default: build).',
   )
+  .option(
+    '--config <config>',
+    'Path to docusaurus config file, default to `[siteDir]/docusaurus.config.js`',
+  )
+  .option(
+    '--generated-files-dir <dir>',
+    'Path to temporary `.docusaurus` folder, default to `[siteDir]/.docusaurus`. This is only relevant when `--build` passed in.',
+  )
   .option(
     '--skip-build',
     'Skip building website before deploy it (default: false)',
   )
-  .action((siteDir = '.', {outDir, skipBuild}) => {
-    wrapCommand(deploy)(path.resolve(siteDir), {outDir, skipBuild});
+  .action((siteDir = '.', {outDir, skipBuild, config, generatedFilesDir}) => {
+    wrapCommand(deploy)(path.resolve(siteDir), {
+      outDir,
+      config,
+      generatedFilesDir,
+      skipBuild,
+    });
   });
 
 cli
@@ -173,21 +201,28 @@ cli
     '--hot-only',
     'Do not fallback to page refresh if hot reload fails (default: false)',
   )
+  .option(
+    '--config <config>',
+    'Path to docusaurus config file, default to `[siteDir]/docusaurus.config.js`',
+  )
   .option('--no-open', 'Do not open page in the browser (default: false)')
   .option(
     '--poll [interval]',
     'Use polling rather than watching for reload (default: false). Can specify a poll interval in milliseconds.',
   )
-  .action((siteDir = '.', {port, host, locale, hotOnly, open, poll}) => {
-    wrapCommand(start)(path.resolve(siteDir), {
-      port,
-      host,
-      locale,
-      hotOnly,
-      open,
-      poll,
-    });
-  });
+  .action(
+    (siteDir = '.', {port, host, locale, config, hotOnly, open, poll}) => {
+      wrapCommand(start)(path.resolve(siteDir), {
+        port,
+        host,
+        locale,
+        config,
+        hotOnly,
+        open,
+        poll,
+      });
+    },
+  );
 
 cli
   .command('serve [siteDir]')
@@ -196,6 +231,14 @@ cli
     '--dir <dir>',
     'The full path for the new output directory, relative to the current workspace (default: build).',
   )
+  .option(
+    '--config <config>',
+    'Path to docusaurus config file, default to `[siteDir]/docusaurus.config.js`',
+  )
+  .option(
+    '--generated-files-dir <dir>',
+    'Path to temporary `.docusaurus` folder, default to `[siteDir]/.docusaurus`. This is only relevant when `--build` passed in.',
+  )
   .option('-p, --port <port>', 'use specified port (default: 3000)')
   .option('--build', 'Build website before serving (default: false)')
   .option('-h, --host <host>', 'use specified host (default: localhost')
@@ -207,12 +250,16 @@ cli
         port = 3000,
         host = 'localhost',
         build: buildSite = false,
+        config,
+        generatedFilesDir,
       },
     ) => {
       wrapCommand(serve)(path.resolve(siteDir), {
         dir,
         port,
         build: buildSite,
+        config,
+        generatedFilesDir,
         host,
       });
     },
@@ -236,6 +283,10 @@ cli
     '--override',
     'By default, we only append missing translation messages to existing translation files. This option allows to override existing translation messages. Make sure to commit or backup your existing translations, as they may be overridden.',
   )
+  .option(
+    '--config <config>',
+    'Path to docusaurus config file, default to `[siteDir]/docusaurus.config.js`',
+  )
   .option(
     '--messagePrefix <messagePrefix>',
     'Allows to init new written messages with a given prefix. This might help you to highlight untranslated message to make them stand out in the UI.',
@@ -243,11 +294,12 @@ cli
   .action(
     (
       siteDir = '.',
-      {locale = undefined, override = false, messagePrefix = ''},
+      {locale = undefined, override = false, messagePrefix = '', config},
     ) => {
       wrapCommand(writeTranslations)(path.resolve(siteDir), {
         locale,
         override,
+        config,
         messagePrefix,
       });
     },
diff --git a/node_modules/@docusaurus/core/lib/commands/build.js b/node_modules/@docusaurus/core/lib/commands/build.js
index 2ea9289..3b4ec18 100644
--- a/node_modules/@docusaurus/core/lib/commands/build.js
+++ b/node_modules/@docusaurus/core/lib/commands/build.js
@@ -25,7 +25,6 @@ const utils_1 = require("../webpack/utils");
 const CleanWebpackPlugin_1 = __importDefault(require("../webpack/plugins/CleanWebpackPlugin"));
 const i18n_1 = require("../server/i18n");
 const utils_2 = require("@docusaurus/utils");
-const config_1 = __importDefault(require("../server/config"));
 async function build(siteDir, cliOptions = {}, 
 // TODO what's the purpose of this arg ?
 forceTerminate = true) {
@@ -46,7 +45,14 @@ forceTerminate = true) {
             throw e;
         }
     }
-    const i18n = await i18n_1.loadI18n(config_1.default(siteDir), {
+    const context = await server_1.loadContext(siteDir, {
+        customOutDir: cliOptions.outDir,
+        customGeneratedFilesDir: cliOptions.generatedFilesDir,
+        customConfigFilePath: cliOptions.config,
+        locale: cliOptions.locale,
+        localizePath: cliOptions.locale ? false : undefined,
+    });
+    const i18n = await i18n_1.loadI18n(context.siteConfig, {
         locale: cliOptions.locale,
     });
     if (cliOptions.locale) {
@@ -77,6 +83,8 @@ async function buildLocale({ siteDir, locale, cliOptions, forceTerminate, isLast
     console.log(chalk_1.default.blue(`\n[${locale}] Creating an optimized production build...`));
     const props = await server_1.load(siteDir, {
         customOutDir: cliOptions.outDir,
+        customConfigFilePath: cliOptions.config,
+        customGeneratedFilesDir: cliOptions.generatedFilesDir,
         locale,
         localizePath: cliOptions.locale ? false : undefined,
     });
diff --git a/node_modules/@docusaurus/core/lib/commands/deploy.js b/node_modules/@docusaurus/core/lib/commands/deploy.js
index eb2d39a..a26fd26 100644
--- a/node_modules/@docusaurus/core/lib/commands/deploy.js
+++ b/node_modules/@docusaurus/core/lib/commands/deploy.js
@@ -10,13 +10,14 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 const fs_extra_1 = __importDefault(require("fs-extra"));
-const path_1 = __importDefault(require("path"));
 const shelljs_1 = __importDefault(require("shelljs"));
 const chalk_1 = __importDefault(require("chalk"));
 const constants_1 = require("../constants");
 const server_1 = require("../server");
-const config_1 = __importDefault(require("../server/config"));
 const build_1 = __importDefault(require("./build"));
+const fs_1 = require("fs");
+const path_1 = __importDefault(require("path"));
+const os_1 = __importDefault(require("os"));
 // GIT_PASS env variable should not appear in logs
 function obfuscateGitPass(str) {
     const gitPass = process.env.GIT_PASS;
@@ -36,10 +37,10 @@ function shellExecLog(cmd) {
     }
 }
 async function deploy(siteDir, cliOptions = {}) {
-    const { outDir } = await server_1.loadContext(siteDir, {
+    const { outDir, siteConfig } = await server_1.loadContext(siteDir, {
+        customConfigFilePath: cliOptions.config,
         customOutDir: cliOptions.outDir,
     });
-    const tempDir = path_1.default.join(siteDir, constants_1.GENERATED_FILES_DIR_NAME);
     console.log('Deploy command invoked ...');
     if (!shelljs_1.default.which('git')) {
         throw new Error('Git not installed or on the PATH!');
@@ -51,7 +52,6 @@ async function deploy(siteDir, cliOptions = {}) {
     // The branch that contains the latest docs changes that will be deployed.
     const currentBranch = process.env.CURRENT_BRANCH ||
         shelljs_1.default.exec('git rev-parse --abbrev-ref HEAD').stdout.trim();
-    const siteConfig = config_1.default(siteDir);
     const organizationName = process.env.ORGANIZATION_NAME ||
         process.env.CIRCLE_PROJECT_USERNAME ||
         siteConfig.organizationName;
@@ -103,13 +103,12 @@ async function deploy(siteDir, cliOptions = {}) {
     // out to deployment branch.
     const currentCommit = shellExecLog('git rev-parse HEAD').stdout.trim();
     const runDeploy = (outputDirectory) => {
-        if (shelljs_1.default.cd(tempDir).code !== 0) {
-            throw new Error(`Temp dir ${constants_1.GENERATED_FILES_DIR_NAME} does not exists. Run build website first.`);
-        }
-        if (shellExecLog(`git clone ${remoteBranch} ${projectName}-${deploymentBranch}`).code !== 0) {
-            throw new Error('Error: git clone failed');
+        const fromPath = outputDirectory;
+        const toPath = fs_1.mkdtempSync(path_1.default.join(os_1.default.tmpdir(), `${projectName}-${deploymentBranch}`));
+        if (shellExecLog(`git clone ${remoteBranch} ${toPath}`).code !== 0) {
+            throw new Error(`Error: git clone failed in ${toPath}`);
         }
-        shelljs_1.default.cd(`${projectName}-${deploymentBranch}`);
+        shelljs_1.default.cd(toPath);
         // If the default branch is the one we're deploying to, then we'll fail
         // to create it. This is the case of a cross-repo publish, where we clone
         // a github.io repo with a default master branch.
@@ -129,12 +128,9 @@ async function deploy(siteDir, cliOptions = {}) {
             }
         }
         shellExecLog('git rm -rf .');
-        shelljs_1.default.cd('../..');
-        const fromPath = outputDirectory;
-        const toPath = path_1.default.join(constants_1.GENERATED_FILES_DIR_NAME, `${projectName}-${deploymentBranch}`);
         fs_extra_1.default.copy(fromPath, toPath, (error) => {
             if (error) {
-                throw new Error(`Error: Copying build assets failed with error '${error}'`);
+                throw new Error(`Error: Copying build assets from "${fromPath}" to "${toPath}" failed with error '${error}'`);
             }
             shelljs_1.default.cd(toPath);
             shellExecLog('git add --all');
@@ -162,8 +158,6 @@ async function deploy(siteDir, cliOptions = {}) {
         });
     };
     if (!cliOptions.skipBuild) {
-        // Clear Docusaurus 2 cache dir for deploy consistency.
-        fs_extra_1.default.removeSync(tempDir);
         // Build static html files, then push to deploymentBranch branch of specified repo.
         build_1.default(siteDir, cliOptions, false)
             .then(runDeploy)
diff --git a/node_modules/@docusaurus/core/lib/commands/serve.js b/node_modules/@docusaurus/core/lib/commands/serve.js
index 99cf170..74e16f7 100644
--- a/node_modules/@docusaurus/core/lib/commands/serve.js
+++ b/node_modules/@docusaurus/core/lib/commands/serve.js
@@ -11,15 +11,18 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 Object.defineProperty(exports, "__esModule", { value: true });
 const http_1 = __importDefault(require("http"));
 const serve_handler_1 = __importDefault(require("serve-handler"));
-const boxen_1 = __importDefault(require("boxen"));
 const chalk_1 = __importDefault(require("chalk"));
 const path_1 = __importDefault(require("path"));
 const build_1 = __importDefault(require("./build"));
 const commandUtils_1 = require("./commandUtils");
 async function serve(siteDir, cliOptions) {
-    let dir = path_1.default.join(siteDir, cliOptions.dir);
+    let dir = path_1.default.isAbsolute(cliOptions.dir)
+        ? cliOptions.dir
+        : path_1.default.join(siteDir, cliOptions.dir);
     if (cliOptions.build) {
         dir = await build_1.default(siteDir, {
+            generatedFilesDir: cliOptions.generatedFilesDir,
+            config: cliOptions.config,
             outDir: dir,
         }, false);
     }
@@ -34,12 +37,7 @@ async function serve(siteDir, cliOptions) {
             public: dir,
         });
     });
-    console.log(boxen_1.default(`${chalk_1.default.green(`Serving ${cliOptions.dir}!`)}\n\n- Local: http://${cliOptions.host}:${port}`, {
-        borderColor: 'green',
-        padding: 1,
-        margin: 1,
-        align: 'center',
-    }));
+    console.log(`${chalk_1.default.green(`Serving ${cliOptions.dir}!`)}\n\n- Local: http://${cliOptions.host}:${port}`);
     server.listen(port);
 }
 exports.default = serve;
diff --git a/node_modules/@docusaurus/core/lib/commands/start.js b/node_modules/@docusaurus/core/lib/commands/start.js
index ab2318e..0303208 100644
--- a/node_modules/@docusaurus/core/lib/commands/start.js
+++ b/node_modules/@docusaurus/core/lib/commands/start.js
@@ -36,6 +36,7 @@ async function start(siteDir, cliOptions) {
     console.log(chalk.blue('Starting the development server...'));
     function loadSite() {
         return server_1.load(siteDir, {
+            customConfigFilePath: cliOptions.config,
             locale: cliOptions.locale,
             localizePath: undefined,
         });
diff --git a/node_modules/@docusaurus/core/lib/commands/writeTranslations.js b/node_modules/@docusaurus/core/lib/commands/writeTranslations.js
index 8c721d7..1bd1662 100644
--- a/node_modules/@docusaurus/core/lib/commands/writeTranslations.js
+++ b/node_modules/@docusaurus/core/lib/commands/writeTranslations.js
@@ -3,12 +3,6 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-/**
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
 const server_1 = require("../server");
 const init_1 = __importDefault(require("../server/plugins/init"));
 const translations_1 = require("../server/translations/translations");
@@ -30,7 +24,10 @@ async function writePluginTranslationFiles({ siteDir, plugin, locale, options, }
 }
 async function writeTranslations(siteDir, options) {
     var _a;
-    const context = await server_1.loadContext(siteDir, { locale: options.locale });
+    const context = await server_1.loadContext(siteDir, {
+        customConfigFilePath: options.config,
+        locale: options.locale,
+    });
     const pluginConfigs = server_1.loadPluginConfigs(context);
     const plugins = init_1.default({
         pluginConfigs,
diff --git a/node_modules/@docusaurus/core/lib/server/config.js b/node_modules/@docusaurus/core/lib/server/config.js
index c39f138..3091830 100644
--- a/node_modules/@docusaurus/core/lib/server/config.js
+++ b/node_modules/@docusaurus/core/lib/server/config.js
@@ -11,16 +11,10 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 Object.defineProperty(exports, "__esModule", { value: true });
 const fs_extra_1 = __importDefault(require("fs-extra"));
 const import_fresh_1 = __importDefault(require("import-fresh"));
-const path_1 = __importDefault(require("path"));
-const constants_1 = require("../constants");
 const configValidation_1 = require("./configValidation");
-const utils_1 = require("@docusaurus/utils");
-function loadConfig(siteDir) {
-    // TODO temporary undocumented env variable: we should be able to use a cli option instead!
-    const loadedConfigFileName = process.env.DOCUSAURUS_CONFIG || constants_1.CONFIG_FILE_NAME;
-    const configPath = path_1.default.resolve(siteDir, loadedConfigFileName);
+function loadConfig(configPath) {
     if (!fs_extra_1.default.existsSync(configPath)) {
-        throw new Error(`${constants_1.CONFIG_FILE_NAME} not found at ${utils_1.toMessageRelativeFilePath(configPath)}`);
+        throw new Error(`Config file "${configPath}" not found`);
     }
     const loadedConfig = import_fresh_1.default(configPath);
     return configValidation_1.validateConfig(loadedConfig);
diff --git a/node_modules/@docusaurus/core/lib/server/index.js b/node_modules/@docusaurus/core/lib/server/index.js
index 42fac5f..e293dba 100644
--- a/node_modules/@docusaurus/core/lib/server/index.js
+++ b/node_modules/@docusaurus/core/lib/server/index.js
@@ -48,9 +48,14 @@ const translations_1 = require("./translations/translations");
 const lodash_1 = require("lodash");
 async function loadContext(siteDir, options = {}) {
     var _a;
-    const { customOutDir, locale } = options;
-    const generatedFilesDir = path_1.default.resolve(siteDir, constants_1.GENERATED_FILES_DIR_NAME);
-    const initialSiteConfig = config_1.default(siteDir);
+    const { customOutDir, locale, customGeneratedFilesDir, customConfigFilePath, } = options;
+    const generatedFilesDir = customGeneratedFilesDir
+        ? path_1.default.resolve(customGeneratedFilesDir)
+        : path_1.default.resolve(siteDir, constants_1.GENERATED_FILES_DIR_NAME);
+    const configPath = customConfigFilePath
+        ? path_1.default.resolve(customConfigFilePath)
+        : path_1.default.resolve(siteDir, constants_1.CONFIG_FILE_NAME);
+    const initialSiteConfig = config_1.default(configPath);
     const { ssrTemplate } = initialSiteConfig;
     const baseOutDir = customOutDir
         ? path_1.default.resolve(customOutDir)
